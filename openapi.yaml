openapi: 3.1.1
info:
  title: "API First"
  version: "1.0.0"
  description: "API Firts"
servers:
  - url: "http://localhost:3000"
components:
  schemas:
    HelloResponse:
      type: "object"
    Product:
      type: "object"
      required:
        - name
        - price
        - category
      properties:
        name:
          type: "string"
          minLength: 2
          maxLength: 40
        description:
          type: "string"
          maxLength: 500
        price:
          type: "number"
          minimum: 0
          multipleOf: 0.01
        category:
          type: "string"
          enum: ["Electronics", "Clothing", "Food", "Furniture", "Other"]
        tags:
          type: "array"
          items:
            type: "string"
          minItems: 1
        inStock:
          type: "boolean"
        specifications:
          type: "object"
          additionalProperties:
            type: "string"
        ratings:
          type: "array"
          items:
            type: "object"
            required:
              - score
              - comment
            properties:
              score:
                type: "integer"
                minimum: 1
                maximum: 5
              comment:
                type: "string"
                maxLength: 200
paths:
  /hello:
    get:
      summary: Hello World
      responses:
        "200":
          description: A successful response
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/HelloResponse"
  /user:
    post:
      summary: Create a user
      requestBody:
        required: true
        content:
          application/json:
              schema:
                type: object
                required:
                  - name
                  - age
                  - email
                properties:
                  name:
                    type: string
                    minLength: 2
                  age:
                    type: integer
                    minimum: 18
                  email:
                    type: string
                    format: email
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  name:
                    type: string
                  age:
                    type: integer
                  email:
                    type: string
  /user/{id}:
    get:
      summary: Get a user by ID 
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User found successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
    post:
      summary: Update a user by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - age
                - email
              properties:
                name:
                  type: string
                  minLength: 2
                email:
                  type: string
                  format: email
                age:
                  type: integer
                  minimum: 18
                
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  age:
                    type: integer
                  email:
                    type: string
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /products:
    get:
      summary: Get all products
      responses:
        '200':
          description: List of products retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
    post:
      summary: Create a new product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Product"
                  - type: object
                    properties:
                      id:
                        type: string
  /products/{id}:
    get:
      summary: Get a product by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Product found successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Product"
                  - type: object
                    properties:
                      id:
                        type: string
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
    put:
      summary: Update a product by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Product"
                  - type: object
                    properties:
                      id:
                        type: string
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
    delete:
      summary: Delete a product by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Product deleted successfully
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string